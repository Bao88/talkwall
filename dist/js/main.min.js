/// <reference path="../../typings/tsd.d.ts"/>
/// <reference path="_references.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    'use strict';
    configApp.$inject = ['$translateProvider', '$httpProvider', '$routeProvider'];
    function configApp($translateProvider, $httpProvider, $routeProvider) {
        // Routes
        $routeProvider
            .when('/', {
            templateUrl: 'js/components/landing/landing.html'
        });
        // Token interceptor
        $httpProvider.interceptors.push('TokenInterceptor');
        // Translation
        $translateProvider.useSanitizeValueStrategy('escaped');
        $translateProvider.useStaticFilesLoader({
            prefix: './languages/',
            suffix: '.json'
        });
    }
    SamtavlaApp.configApp = configApp;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="_references.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    'use strict';
    runApp.$inject = ['$rootScope'];
    function runApp($rootScope) {
        console.log('--> runApp started');
    }
    SamtavlaApp.runApp = runApp;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../_references.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
    var URLService = (function () {
        function URLService($location) {
            this.$location = $location;
            this.domain = 'en';
            if (this.$location.host().indexOf('.no') > -1) {
                this.domain = 'no';
            }
            console.log('--> URLService started ... the locale used is: ' + this.domain);
        }
        URLService.prototype.getDomain = function () {
            return this.domain;
        };
        URLService.$inject = ["$location"];
        return URLService;
    }());
    SamtavlaApp.URLService = URLService;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../_references.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
    var AuthenticationService = (function () {
        function AuthenticationService() {
            this._isAuthenticated = false;
        }
        Object.defineProperty(AuthenticationService.prototype, "isAuthenticated", {
            get: function () {
                return this._isAuthenticated;
            },
            set: function (value) {
                this._isAuthenticated = value;
            },
            enumerable: true,
            configurable: true
        });
        return AuthenticationService;
    }());
    SamtavlaApp.AuthenticationService = AuthenticationService;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../_references.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="urlservice.ts"/>
/// <reference path="authenticationservice.ts"/>
/// <reference path="../models/models.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
    var DataService = (function () {
        function DataService() {
            console.log('--> DataService started ...');
        }
        return DataService;
    }());
    SamtavlaApp.DataService = DataService;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="authenticationservice.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
    var TokenInterceptor = (function () {
        function TokenInterceptor($q, $window, $location, authenticationService) {
            var _this = this;
            this.$q = $q;
            this.$window = $window;
            this.$location = $location;
            this.authenticationService = authenticationService;
            this.request = function (config) {
                var tKey = 'token', aKey = 'Authorization';
                config.headers = config.headers || {};
                if (_this.$window.sessionStorage[tKey]) {
                    config.headers[aKey] = 'Bearer ' + _this.$window.sessionStorage[tKey];
                }
                return config;
            };
            this.requestError = function (rejection) {
                return _this.$q.reject(rejection);
            };
            this.response = function (response) {
                var tKey = 'token', sKey = 'status';
                if (response !== null && response[sKey] === 200 && _this.$window.sessionStorage[tKey]
                    && !_this.authenticationService.isAuthenticated) {
                    _this.authenticationService.isAuthenticated = true;
                    console.log('TokenInterceptor: client already authenticated: ' + _this.$window.sessionStorage[tKey]);
                }
                return response || _this.$q.when(response);
            };
            this.responseError = function (rejection) {
                var tKey = 'token';
                if (rejection !== null && rejection.status === 401 && (_this.$window.sessionStorage[tKey]
                    || _this.authenticationService.isAuthenticated)) {
                    delete _this.$window.sessionStorage[tKey];
                    _this.authenticationService.isAuthenticated = false;
                    console.log('TokenInterceptor: client NOT authenticated');
                    _this.$location.path("/login");
                }
                return _this.$q.reject(rejection);
            };
            console.log('--> ITokenInterceptor started ...');
        }
        TokenInterceptor.$inject = ['$q', '$window', '$location', 'AuthenticationService'];
        return TokenInterceptor;
    }());
    SamtavlaApp.TokenInterceptor = TokenInterceptor;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../_references.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
    var UtilityService = (function () {
        function UtilityService() {
            console.log('--> UtilityService started ...');
        }
        return UtilityService;
    }());
    SamtavlaApp.UtilityService = UtilityService;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../_references.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
    AutoResize.$inject = ['$window'];
    function AutoResize($window) {
        var link = function (scope, element, attrs) {
            function initializeWindowSize() {
                var mhKey = 'maxHeight', whKey = 'windowHeight', wwKey = 'windowWidth';
                scope[mhKey] = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight, window.innerHeight);
                scope[whKey] = $window.innerHeight;
                scope[wwKey] = $window.innerWidth;
            }
            initializeWindowSize();
            scope.$watch('__height', function () {
                initializeWindowSize();
            });
            angular.element($window).bind('resize', function () {
                initializeWindowSize();
                return scope.$apply();
            });
        };
        return {
            link: link
        };
    }
    SamtavlaApp.AutoResize = AutoResize;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    "use strict";
    var LandingController = (function () {
        function LandingController(urlService, $translate) {
            this.urlService = urlService;
            this.$translate = $translate;
            console.log('--> LandingController: started: ');
            this.$translate.use(this.urlService.getDomain());
        }
        LandingController.$inject = ['URLService', '$translate'];
        return LandingController;
    }());
    SamtavlaApp.LandingController = LandingController;
})(SamtavlaApp || (SamtavlaApp = {}));
/// <reference path="_references.ts"/>
/// <reference path="app.config.ts"/>
/// <reference path="services/dataservice.ts"/>
/// <reference path="services/authenticationservice.ts"/>
/// <reference path="services/tokenservice.ts"/>
/// <reference path="services/urlservice.ts"/>
/// <reference path="services/utilityservice.ts"/>
/// <reference path="directives/autoresize.ts"/>
/// <reference path="components/landing/landing.ts"/>
/// <reference path="app.run.ts"/>
var SamtavlaApp;
(function (SamtavlaApp) {
    'use strict';
    var dependencies = [
        'ngRoute',
        'ngAria',
        'ngAnimate',
        'pascalprecht.translate',
        'ngMaterial'
    ];
    angular.module('SamtavlaApp', dependencies)
        .config(SamtavlaApp.configApp)
        .service('URLService', SamtavlaApp.URLService)
        .service('DataService', SamtavlaApp.DataService)
        .service('AuthenticationService', SamtavlaApp.AuthenticationService)
        .service('TokenInterceptor', SamtavlaApp.TokenInterceptor)
        .service('UtilityService', SamtavlaApp.UtilityService)
        .directive('autoresize', SamtavlaApp.AutoResize)
        .controller('LandingController', SamtavlaApp.LandingController)
        .run(SamtavlaApp.runApp);
})(SamtavlaApp || (SamtavlaApp = {}));
