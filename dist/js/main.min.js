/// <reference path="../../typings/index.d.ts"/>
/// <reference path="_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    'use strict';
    configApp.$inject = ['$translateProvider', '$httpProvider', '$routeProvider'];
    /**
     * Application-wide overall configuration
     * @param $translateProvider  Used for defining default language translation support.
     * @param $httpProvider  Used for registering an interceptor (TokenInterceptor).
     * @param $routeProvider  Used for defining default routing.
     */
    function configApp($translateProvider, $httpProvider, $routeProvider) {
        // Routes
        $routeProvider.
            when('/export', {
            templateUrl: 'js/components/export/export.html'
        })
            .when('/wall', {
            templateUrl: 'js/components/wall/wall.html'
        })
            .when('/', {
            templateUrl: 'js/components/landing/landing.html'
        });
        // Token interceptor
        $httpProvider.interceptors.push('TokenInterceptor');
        // Translation
        $translateProvider.useSanitizeValueStrategy('escaped');
        $translateProvider.useStaticFilesLoader({
            prefix: './languages/',
            suffix: '.json'
        });
        var lang = null;
        var languagesKey = 'languages';
        var langKey = 'lang';
        if (navigator[languagesKey]) {
            lang = navigator[languagesKey][0];
        }
        else {
            lang = navigator.language || navigator['userLanguage'];
        }
        if (lang.indexOf('no') > -1 || lang.indexOf('nb') > -1) {
            $translateProvider.preferredLanguage('no');
            sessionStorage[langKey] = 'no';
        }
        else {
            $translateProvider.preferredLanguage('en');
            sessionStorage[langKey] = 'en';
        }
    }
    TalkwallApp.configApp = configApp;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path='_references.ts'/>
var TalkwallApp;
(function (TalkwallApp) {
    'use strict';
    var TalkwallConstants = (function () {
        function TalkwallConstants() {
        }
        Object.defineProperty(TalkwallConstants, "constants", {
            get: function () {
                return {
                    POLL_INTERVAL_SECONDS: 5,
                    /****  Colours animated from wall.scss  References are here  */
                    BACKGROUND_COLOURS: ['bg1', 'bg2', 'bg3', 'bg4', 'bg5', 'bg6', 'bg7', 'bg8', 'bg9'],
                    // BACKGROUND_COLOURS: ["#5E7E98", "#666666", "#6D8565", "#7A7A7A", "#828565", "#858585", "#8EBEE6",
                    //    "#998C5F", "#999999", "#ABD19F"],
                    COMPLEMENTARY_COLOURS: ['#FFFFF5', '#FFFFF5', '#FFFFF5', '#FFFFF5', '#FFFFF5', '#FFFFF5', '#FFFFF5',
                        '#FFFFF5', '#FFFFF5', '#FFFFF5']
                };
            },
            enumerable: true,
            configurable: true
        });
        ;
        return TalkwallConstants;
    }());
    TalkwallApp.TalkwallConstants = TalkwallConstants;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    'use strict';
    runApp.$inject = ['$rootScope'];
    function runApp($rootScope) {
        console.log('--> runApp started');
    }
    TalkwallApp.runApp = runApp;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var URLService = (function () {
        function URLService($location) {
            this.$location = $location;
            console.log('--> URLService started ... ');
        }
        URLService.prototype.getHost = function () {
            if (this.$location.port() === 80) {
                return this.$location.protocol() + '://' + this.$location.host();
            }
            else {
                return this.$location.protocol() + '://' + this.$location.host() + ':' + this.$location.port();
            }
        };
        URLService.$inject = ['$location'];
        return URLService;
    }());
    TalkwallApp.URLService = URLService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var AuthenticationService = (function () {
        function AuthenticationService() {
            this._isAuthenticated = false;
        }
        Object.defineProperty(AuthenticationService.prototype, "isAuthenticated", {
            get: function () {
                return this._isAuthenticated;
            },
            set: function (value) {
                this._isAuthenticated = value;
            },
            enumerable: true,
            configurable: true
        });
        return AuthenticationService;
    }());
    TalkwallApp.AuthenticationService = AuthenticationService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var User = (function () {
        function User() {
        }
        return User;
    }());
    TalkwallApp.User = User;
    var Wall = (function () {
        function Wall() {
        }
        return Wall;
    }());
    TalkwallApp.Wall = Wall;
    var Question = (function () {
        function Question(label) {
            this.label = label;
            this.grid = 'none';
            this.messages = [];
            this.showControls = false;
            this.createdAt = new Date();
            this.contributors = [];
            this.isNew = false;
        }
        Question.prototype.updateMe = function (newQuestion) {
            this._id = newQuestion['_id'];
            this.createdAt = newQuestion['createdAt'];
            this.label = newQuestion['label'];
            this.grid = newQuestion['grid'];
            if (typeof newQuestion['contributors'] !== 'undefined' && newQuestion['contributors'] !== null) {
                this.contributors = newQuestion['contributors'];
            }
            return this;
        };
        return Question;
    }());
    TalkwallApp.Question = Question;
    /* Sub classes for Message */
    var Nickname = (function () {
        function Nickname(x, y, highlighted) {
            this.xpos = x;
            this.ypos = y;
            this.highlighted = highlighted;
        }
        Nickname.prototype.updateMe = function (x, y, highlighted) {
            this.xpos = x;
            this.ypos = y;
            this.highlighted = highlighted;
        };
        return Nickname;
    }());
    TalkwallApp.Nickname = Nickname;
    var Message = (function () {
        function Message() {
            this.createdAt = new Date();
            this.deleted = false;
            this.text = '';
            this.origin = [];
            this.edits = [];
            this.board = {};
            this.isHighlighted = false;
        }
        Message.prototype.createFromOrigin = function (originMessage, newNickname) {
            // no _id until sent to server
            var _this = this;
            this.text = originMessage.text;
            this.creator = newNickname;
            this.question_id = originMessage.question_id;
            originMessage.origin.forEach(function (origin) {
                _this.origin.push(origin);
            });
            this.origin.push({ nickname: newNickname, message_id: originMessage._id });
            this.origin.reverse();
            if (typeof originMessage.board[newNickname] !== 'undefined') {
                this.board[newNickname] = new Nickname(originMessage.board['xpos'], originMessage.board['ypos'], originMessage.board['highlighted']);
            }
            return this;
        };
        Message.prototype.updateMe = function (newMessage) {
            this._id = newMessage['_id'];
            this.createdAt = newMessage['createdAt'];
            this.deleted = newMessage['deleted'];
            this.creator = newMessage['creator'];
            this.text = newMessage['text'];
            this.question_id = newMessage['question_id'];
            if (typeof newMessage['board'] !== 'undefined' && newMessage['board'] !== null) {
                this.updateBoard(newMessage['board']);
            }
            else {
                // Remove all nicknames
                for (var nickname in this.board) {
                    if (this.board.hasOwnProperty(nickname)) {
                        delete this.board[nickname];
                    }
                }
            }
            if (typeof newMessage['origin'] !== 'undefined' && newMessage['origin'] !== null) {
                this.origin = newMessage['origin'];
            }
            if (typeof newMessage['edits'] !== 'undefined' && newMessage['edits'] !== null) {
                this.edits = newMessage['edits'];
            }
            return this;
        };
        Message.prototype.updateBoard = function (newBoard) {
            for (var nickname in newBoard) {
                if (newBoard.hasOwnProperty(nickname)) {
                    // Update an existing nickname
                    if (this.board.hasOwnProperty(nickname)) {
                        this.board[nickname].updateMe(newBoard[nickname]['xpos'], newBoard[nickname]['ypos'], newBoard[nickname]['highlighted']);
                    }
                    else {
                        this.board[nickname] = new Nickname(newBoard[nickname]['xpos'], newBoard[nickname]['ypos'], newBoard[nickname]['highlighted']);
                    }
                }
            }
            // Remove nicknames no longer in the updated message
            for (var nickname in this.board) {
                if (this.board.hasOwnProperty(nickname) && !newBoard.hasOwnProperty(nickname)) {
                    delete this.board[nickname];
                }
            }
        };
        return Message;
    }());
    TalkwallApp.Message = Message;
    // Queues contain only the modifiable data needed
    var UpdatedQueueItem = (function () {
        function UpdatedQueueItem() {
        }
        return UpdatedQueueItem;
    }());
    TalkwallApp.UpdatedQueueItem = UpdatedQueueItem;
    var CreatedQueueItem = (function () {
        function CreatedQueueItem() {
        }
        return CreatedQueueItem;
    }());
    TalkwallApp.CreatedQueueItem = CreatedQueueItem;
    // Class used to send and respond with status & message updates through polling
    var PollUpdate = (function () {
        // set status to PollUpdate('', false) to prevent any status update on server
        function PollUpdate(question_id) {
            this.totalOnTalkwall = 0;
            this.status = {
                last_update: Date.now(),
                last_access: Date.now(),
                teacher_current_question: question_id,
                connected_teachers: [],
                connected_students: [],
                idleTerminationTime: 0
            };
            this.created = {};
            this.updated = {};
        }
        return PollUpdate;
    }());
    TalkwallApp.PollUpdate = PollUpdate;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="../models/models.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var UtilityService = (function () {
        function UtilityService() {
            console.log('--> UtilityService started ...');
        }
        UtilityService.prototype.v4 = function () {
            var id = '', i;
            for (i = 0; i < 36; i++) {
                if (i === 14) {
                    id += '4';
                }
                else if (i === 19) {
                    id += '89ab'.charAt(UtilityService.getRandom(4));
                }
                else if (i === 8 || i === 13 || i === 18 || i === 23) {
                    id += '-';
                }
                else {
                    id += '0123456789abcdef'.charAt(UtilityService.getRandom(16));
                }
            }
            return id;
        };
        UtilityService.getRandom = function (max) {
            return Math.random() * max;
        };
        UtilityService.getFormattedDate = function (date) {
            if (date !== null) {
                return moment(date).format('DD/MM/YYYY - HH:mm');
            }
        };
        UtilityService.prototype.getRandomBetween = function (min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        };
        UtilityService.prototype.removeNullIn = function (prop, obj) {
            var pr = obj[prop];
            if (pr === null || pr === undefined) {
                delete obj[prop];
            }
            else if (typeof pr === 'object') {
                for (var i in pr) {
                    if (pr.hasOwnProperty(i)) {
                        this.removeNullIn(i, pr);
                    }
                }
            }
        };
        UtilityService.prototype.removeNull = function (obj) {
            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    this.removeNullIn(i, obj);
                }
            }
        };
        // Return the Message from a Question for the given message ID and question
        UtilityService.prototype.getMessageFromQuestionById = function (id, question) {
            var message = null;
            question.messages.forEach(function (m) {
                if (m._id === id) {
                    message = m;
                }
            });
            return message;
        };
        ;
        // Return the index of the given question ID on a wall
        UtilityService.getQuestionIndexFromWallById = function (id, wall) {
            for (var i = 0; i < wall.questions.length; i++) {
                if (wall.questions[i]._id === id) {
                    return i;
                }
            }
            return -1;
        };
        UtilityService.prototype.getPossibleTags = function (content) {
            var tags = [];
            if (content !== undefined) {
                /* tslint:disable */
                tags = content.match(/#[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC0-9]+/g);
            }
            return tags;
        };
        return UtilityService;
    }());
    TalkwallApp.UtilityService = UtilityService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var CloseController = (function () {
        function CloseController($mdDialog) {
            this.$mdDialog = $mdDialog;
            this.theanswer = {
                answered: true
            };
            console.log('--> LoginController: started: ');
        }
        /**
         * hide this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        CloseController.prototype.hide = function (response) {
            console.log('--> JoinController: hide');
            this.$mdDialog.hide();
        };
        ;
        /**
         * cancel this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        CloseController.prototype.cancel = function (response) {
            console.log('--> JoinController: cancel');
            this.$mdDialog.cancel();
        };
        ;
        /**
         * answer this dialog
         * @aparam answer aa a string
         */
        CloseController.prototype.answer = function () {
            this.$mdDialog.hide(this.theanswer);
        };
        ;
        CloseController.$inject = ['$mdDialog'];
        return CloseController;
    }());
    TalkwallApp.CloseController = CloseController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
/// <reference path="../../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var ArchiveWallController = (function () {
        function ArchiveWallController($mdDialog, dataService) {
            this.$mdDialog = $mdDialog;
            this.dataService = dataService;
            this.showInput = false;
            this.owneremail = undefined;
            console.log('--> LoginController: started: ');
            if (this.dataService.getAuthenticatedUser().defaultEmail !== undefined && this.dataService.getAuthenticatedUser().defaultEmail !== '') {
                this.owneremail = this.dataService.getAuthenticatedUser().defaultEmail;
            }
        }
        /**
         * hide this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        ArchiveWallController.prototype.hide = function (response) {
            console.log('--> ArchiveWallController: hide');
            this.$mdDialog.hide();
        };
        ;
        /**
         * cancel this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        ArchiveWallController.prototype.cancel = function (response) {
            console.log('--> ArchiveWallController: cancel');
            this.$mdDialog.cancel();
        };
        ;
        /**
         * answer this dialog
         * @aparam answer aa a string
         */
        ArchiveWallController.prototype.answer = function (answer) {
            console.log('--> ArchiveWallController: answer: ' + answer);
            this.$mdDialog.hide(answer);
        };
        ;
        ArchiveWallController.$inject = ['$mdDialog', 'DataService'];
        return ArchiveWallController;
    }());
    TalkwallApp.ArchiveWallController = ArchiveWallController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="../app.constants.ts"/>
/// <reference path="urlservice.ts"/>
/// <reference path="authenticationservice.ts"/>
/// <reference path="utilityservice.ts"/>
/// <reference path="urlservice.ts"/>
/// <reference path="../components/close/close.ts"/>
/// <reference path="../components/archive/archive.ts"/>
/// <reference path="../models/models.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var DataService = (function () {
        function DataService($http, $window, $routeParams, $rootScope, $location, $interval, $timeout, $mdDialog, $translate, utilityService, urlService, $mdMedia, constants) {
            var _this = this;
            this.$http = $http;
            this.$window = $window;
            this.$routeParams = $routeParams;
            this.$rootScope = $rootScope;
            this.$location = $location;
            this.$interval = $interval;
            this.$timeout = $timeout;
            this.$mdDialog = $mdDialog;
            this.$translate = $translate;
            this.utilityService = utilityService;
            this.urlService = urlService;
            this.$mdMedia = $mdMedia;
            this.constants = constants;
            this.noTag = 'no tag';
            this.pollingTimerHandle = null;
            this.restrictTimerHandle = null;
            this.data = {
                user: null,
                wall: null,
                question: null,
                status: {
                    authorised: false,
                    nickname: null,
                    participants: [],
                    totalOnTalkwall: 0,
                    selectedParticipant: null,
                    questionToEdit: null,
                    messageToEdit: null,
                    messageOrigin: null,
                    updateOrigin: false,
                    currentQuestionIndex: -1,
                    phoneMode: false,
                    contributors: [],
                    unselected_contributors: [],
                    tags: [],
                    unselected_tags: [],
                    tagCounter: {},
                    boardDivSize: {},
                    last_status_update: 0,
                    touchControl: false,
                    restrictPositionRequests: false,
                    restrictPositionRequestMessages: {},
                    idleTerminationTime: 43200 // One year = 525600 minutes.  One month = 43200 minutes.
                }
            };
            this.customFullscreen = this.$mdMedia('xs') || this.$mdMedia('sm');
            console.log('--> DataService started ...');
            $translate('NO_TAG').then(function (translation) {
                _this.noTag = translation;
            });
        }
        DataService.prototype.restrictRequests = function () {
            var _this = this;
            if (this.restrictTimerHandle !== null) {
                this.$timeout.cancel(this.restrictTimerHandle);
            }
            this.data.status.restrictPositionRequests = true;
            this.restrictTimerHandle = this.$timeout(function () {
                _this.data.status.restrictPositionRequests = false;
                _this.sendPendingPositionUpdates();
                console.log('Sending pending position updates');
            }, 3000);
        };
        ;
        // Remove token string from the address bar. Then, if authorised, get the user model and the most recent wall
        // Otherwise, follow on back to where we came from..
        DataService.prototype.checkAuthentication = function (successCallbackFn, errorCallbackFn) {
            var _this = this;
            var tKey = 'authenticationToken', tokenKey = 'token';
            this.data.status.phoneMode = this.$mdMedia('max-width: 960px');
            var tokenParam = this.$routeParams[tKey] || '';
            if (tokenParam !== '') {
                //look at the route params first for 'authenticationToken'
                console.log('--> DataService: token from parameter');
                this.$window.sessionStorage[tokenKey] = tokenParam;
                //this will reload the page, clearing the token parameter. next time around it will hit the next 'else if'
                this.$location.search(tKey, null);
            }
            else if (this.$window.sessionStorage[tokenKey]) {
                this.data.status.authorised = true;
                //look at the window session object for the token. time to load the question
                console.log('--> DataService: token already existing');
                this.requestUser(function (user) {
                    _this.data.status.nickname = user.nickname;
                    if (user.lastOpenedWall === null) {
                        _this.createWall(successCallbackFn, errorCallbackFn);
                    }
                    else {
                        _this.$mdDialog.show({
                            controller: TalkwallApp.ArchiveWallController,
                            controllerAs: 'archiveWallC',
                            templateUrl: 'js/components/archive/archive.html',
                            parent: angular.element(document.body),
                            clickOutsideToClose: true
                        }).then(function (answer) {
                            //dialog answered
                            console.log('--> DataService: ArchiveWallController: answer: ' + answer);
                            if (answer === 'continue') {
                                _this.requestWall(user.lastOpenedWall, successCallbackFn, errorCallbackFn);
                            }
                            else {
                                _this.$http.put(_this.urlService.getHost() + '/wall/close/' + user.lastOpenedWall, {
                                    targetEmail: answer
                                })
                                    .then(function () {
                                    console.log('--> DataService: close wall success');
                                    _this.createWall(successCallbackFn, errorCallbackFn);
                                }, function (error) {
                                    console.log('--> DataService: close wall failure: ' + error);
                                    if (typeof errorCallbackFn === "function") {
                                        errorCallbackFn({ status: error.status, message: error.message });
                                    }
                                });
                            }
                        }, function () {
                            //dialog dismissed
                            console.log('--> DataService: ArchiveWallController: dismissed');
                            _this.$window.location.href = _this.urlService.getHost() + '/#/';
                        });
                    }
                }, function () {
                    //TODO: handle get user error
                });
            }
            else {
                // Fall through..
                this.data.status.authorised = false;
                successCallbackFn();
            }
            // Set up listener for disconnect
            this.$window.onbeforeunload = function () {
                var url = _this.urlService.getHost() + '/';
                var clientType = _this.data.status.authorised ? 'disconnectteacher/' : 'disconnect/';
                _this.$http.get(url + clientType + _this.data.status.nickname + '/' + _this.data.wall._id + '/' + _this.data.question._id)
                    .then(function () {
                    this.$window.location.href = url;
                });
            };
            /*
             // Alternative method for disconnect - causes a browser dialog to show and allows time for disconnect request
             let handle = this;
             this.$window.onbeforeunload = function(ev: BeforeUnloadEvent): any {
             let x = logout();
             return x;
             };

             function logout() {
             let url = handle.urlService.getHost() +
             '/disconnect/' + handle.data.status.nickname + '/' + handle.wall.pin + '/' + handle.question._id;
             handle.$window.location.href = handle.urlService.getHost() + '/';
             handle.$http.get(url).then(function() { console.log('disconnect sent'); } );
             return 'Are you sure you want to close Talkwall?';
             }
             */
        };
        DataService.prototype.getAuthenticatedUser = function () {
            return this.data.user;
        };
        DataService.prototype.requestUser = function (successCallbackFn, errorCallbackFn) {
            var _this = this;
            //this will return the correct user from the service, based on the req.user object.
            this.$http.get(this.urlService.getHost() + '/user')
                .then(function (result) {
                var resultKey = 'result';
                _this.data.user = result.data[resultKey];
                console.log('--> DataService: getUser success');
                if (typeof successCallbackFn === "function") {
                    successCallbackFn(_this.data.user);
                }
            }, function (error) {
                console.log('--> DataService: getUser failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        // For authorised users only
        DataService.prototype.requestWall = function (wallId, successCallbackFn, errorCallbackFn) {
            var _this = this;
            //return the previous wall with a the existing PIN from REDIS (if expired return true)
            this.$http.get(this.urlService.getHost() + '/wall/' + wallId)
                .then(function (result) {
                var resultKey = 'result';
                _this.data.wall = result.data[resultKey];
                console.log('--> DataService: getWall success');
                var question_index = _this.data.wall.questions.length > 0 ? 0 : -1;
                _this.setQuestion(question_index, successCallbackFn, errorCallbackFn);
            }, function (error) {
                console.log('--> DataService: getWall failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        // For authorised users only
        DataService.prototype.createWall = function (successCallbackFn, errorCallbackFn) {
            var _this = this;
            this.$http.post(this.urlService.getHost() + '/wall', { label: "New Wall: " + new Date().toDateString() })
                .then(function (result) {
                var resultKey = 'result';
                _this.data.wall = result.data[resultKey];
                console.log('--> DataService: createWall success');
                if (typeof successCallbackFn === "function") {
                    successCallbackFn(_this.data.wall);
                }
            }, function (error) {
                console.log('--> DataService: createWall failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        // For non-authorised users
        DataService.prototype.getClientWall = function (joinModel, successCallbackFn, errorCallbackFn) {
            var _this = this;
            this.$http.get(this.urlService.getHost() + '/clientwall/' + joinModel.nickname + '/' + joinModel.pin)
                .then(function (success) {
                var resultKey = 'result', dataKey = 'data', statusKey = 'status';
                // The wall is closed
                if (success[statusKey] === 204) {
                    if (_this.data.wall !== null) {
                        _this.data.wall.closed = true;
                    }
                    _this.stopPolling();
                    _this.showClosingDialog();
                }
                else {
                    _this.data.wall = success[dataKey][resultKey];
                    _this.data.status.nickname = joinModel.nickname;
                    console.log('--> DataService: getClientWall success');
                }
                if (typeof successCallbackFn === "function") {
                    successCallbackFn(_this.data.wall);
                }
            }, function (error) {
                // Close client wall if wall was closed by teacher
                _this.data.wall.closed = true;
                _this.stopPolling();
                _this.showClosingDialog();
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        // Accessor functions for passing messages between directives
        DataService.prototype.setMessageToEdit = function (message) {
            if (message === null && this.data.status.messageOrigin === null) {
                //no message, create a new one
                this.data.status.messageToEdit = new TalkwallApp.Message();
                this.data.status.messageToEdit.creator = this.data.status.nickname;
                this.data.status.messageToEdit.origin.push({ nickname: this.data.status.nickname, message_id: null });
                this.data.status.messageToEdit.question_id = this.data.question._id;
            }
            else if (message === null && this.data.status.messageOrigin !== null) {
                //we have an origin to create the new message, clone it
                //this.data.status.messageToEdit = JSON.parse(JSON.stringify(this.data.status.messageOrigin));
                this.data.status.messageToEdit = new TalkwallApp.Message().createFromOrigin(this.data.status.messageOrigin, this.data.status.nickname);
                this.data.status.updateOrigin = typeof this.data.status.messageOrigin.board[this.data.status.nickname] !== 'undefined';
            }
            else {
                this.data.status.messageToEdit = message;
            }
        };
        DataService.prototype.clearMessageToEdit = function () {
            this.data.status.messageToEdit = null;
        };
        DataService.prototype.getMessageToEdit = function () {
            return this.data.status.messageToEdit;
        };
        DataService.prototype.setMessageOrigin = function (message) {
            this.data.status.messageOrigin = message;
        };
        DataService.prototype.getMessageOrigin = function () {
            return this.data.status.messageOrigin;
        };
        DataService.prototype.getWall = function () {
            return this.data.wall;
        };
        // If we are changing questions, or a new question, set the polling params correctly. Input new question index.
        DataService.prototype.setQuestion = function (newIndex, successCallbackFn, errorCallbackFn) {
            var previous_question_id = 'none', control = 'none';
            this.stopPolling();
            //if no more questions
            if (this.data.wall.questions.length === 0) {
                console.log('--> setQuestion: no more questions ...');
                this.data.question = null;
            }
            // If true, we are changing questions
            if (this.data.question !== null
                && TalkwallApp.UtilityService.getQuestionIndexFromWallById(this.data.question._id, this.data.wall) !== newIndex) {
                previous_question_id = this.data.question._id;
                control = 'change';
            }
            else if (this.data.question === null) {
                control = 'new';
            }
            // Now set the question if we have it available on the client.
            // If not, we will poll anyway, until notification arrives from server of teacher moving to a question
            if (newIndex !== -1 && this.data.wall.questions.length > 0) {
                this.data.question = new TalkwallApp.Question("").updateMe(this.data.wall.questions[newIndex]);
                this.data.status.currentQuestionIndex = newIndex;
                this.data.status.contributors = this.data.question.contributors;
                // Re-do the hashtag list
                this.buildTagArray();
            }
            // Get the whole message list if we are 'new' or 'changing'
            // Notify a change of question if we are the teacher
            if (control !== 'none' && this.data.question !== null) {
                this.getMessages();
                if (this.data.status.authorised) {
                    this.notifyChangedQuestion(this.data.question._id, previous_question_id, null, null);
                }
            }
            // Start polling regardless of the question existing, to enable poll notifications
            if (this.pollingTimerHandle === null) {
                // Make a special poll request without delay, then set up regular polling
                this.requestPoll(previous_question_id, control, null, null);
                this.startPolling();
            }
            if (typeof successCallbackFn === "function") {
                successCallbackFn(this.data.wall);
            }
        };
        DataService.prototype.closeWallNow = function (targetEmail) {
            var handle = this;
            this.data.wall.closed = true;
            this.data.wall.targetEmail = targetEmail;
            this.updateWall(function () {
                handle.$window.location.href = handle.urlService.getHost() + '/#/';
            }, null);
        };
        /*
         getNickname(): string {
         return this.data.status.authorised ? this.data.user.nickname : this.data.status.studentNickname;
         }
         */
        DataService.prototype.updateWall = function (successCallbackFn, errorCallbackFn) {
            this.$http.put(this.urlService.getHost() + '/wall', {
                wall: this.data.wall
            })
                .then(function () {
                if (typeof successCallbackFn === "function") {
                    successCallbackFn();
                }
            }, function (error) {
                console.log('--> DataService: getQuestion failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        DataService.prototype.notifyChangedQuestion = function (new_question_id, previous_question_id, successCallbackFn, errorCallbackFn) {
            this.$http.get(this.urlService.getHost() + '/change/' + this.data.status.nickname + '/' + this.data.wall._id + '/' + new_question_id + '/' + previous_question_id)
                .then(function () {
                if (typeof successCallbackFn === "function") {
                    successCallbackFn();
                }
            }, function (error) {
                console.log('--> DataService: notifyChangedQuestion failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        // 'previousQuestionId' to old question index if we are changing questions. Else set it to -1
        // 'question_id' - may not be set when we first enter - a request with 'none' as question_id returns only status
        // 'control' - 'none' is a regular poll, 'new' is the first poll, 'change' we are changing questions
        DataService.prototype.requestPoll = function (previousQuestionId, control, successCallbackFn, errorCallbackFn) {
            var _this = this;
            var question_id = 'none', pollRoute = '/poll/';
            if (this.data.question !== null) {
                question_id = this.data.question._id;
            }
            if (this.data.status.authorised) {
                pollRoute = '/pollteacher/';
            }
            this.$http.get(this.urlService.getHost() + pollRoute + this.data.status.nickname + '/' + this.data.wall._id +
                '/' + question_id + '/' + previousQuestionId + '/' + control)
                .then(function (result) {
                var resultKey = 'result';
                console.log('Polled at ' + TalkwallApp.UtilityService.getFormattedDate(new Date()));
                if (result.data[resultKey] === null) {
                    console.log('The wall does not exist on server');
                    _this.stopPolling();
                }
                else {
                    _this.processUpdatedMessages(result.data[resultKey]);
                }
                if (typeof successCallbackFn === "function") {
                    successCallbackFn();
                }
            }, function (error) {
                console.log('Poll FAILED at ' + Date.now().toString());
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        DataService.prototype.setQuestionToEdit = function (question) {
            this.data.status.questionToEdit = question;
        };
        //generate a new question on server with _id and returns it
        DataService.prototype.addQuestion = function (successCallbackFn, errorCallbackFn) {
            var _this = this;
            this.$http.post(this.urlService.getHost() + '/question', { wall_id: this.data.wall._id, question: this.data.status.questionToEdit })
                .then(function (response) {
                var resultKey = 'result', firstQuestion;
                firstQuestion = _this.data.wall.questions.length === 0;
                _this.data.wall.questions.push(response.data[resultKey]);
                // If this was the first question, set it
                if (firstQuestion) {
                    _this.setQuestion(0, successCallbackFn, errorCallbackFn);
                }
                if (typeof successCallbackFn === "function") {
                    successCallbackFn();
                }
            }, function (error) {
                console.log('--> DataService: getQuestion failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        DataService.prototype.updateQuestion = function (successCallbackFn, errorCallbackFn) {
            var _this = this;
            if (this.data.status.questionToEdit === null) {
                errorCallbackFn({ status: '400', message: "question is not defined" });
            }
            this.$http.put(this.urlService.getHost() + '/question', {
                wall_id: this.data.wall._id,
                question: this.data.status.questionToEdit
            })
                .then(function () {
                console.log('updating the question');
                if (_this.data.status.questionToEdit._id === _this.data.question._id) {
                    _this.data.question.updateMe(_this.data.status.questionToEdit);
                }
                _this.data.status.questionToEdit.showControls = false;
                if (typeof successCallbackFn === "function") {
                    successCallbackFn();
                }
            }, function (error) {
                console.log('--> DataService: updateQuestion failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        DataService.prototype.deleteQuestion = function (question, successCallbackFn, errorCallbackFn) {
            var _this = this;
            //first check if there are existing message for that question
            this.$http.get(this.urlService.getHost() + '/messages/' + question._id)
                .then(function (result) {
                console.log('--> DataService deleteQuestion: getMessages success');
                var resultKey = 'result';
                if (result.data[resultKey].length === 0) {
                    var new_question_index_1 = _this.data.status.currentQuestionIndex;
                    var deleted_question_index = TalkwallApp.UtilityService.getQuestionIndexFromWallById(question._id, _this.data.wall);
                    _this.data.wall.questions.splice(deleted_question_index, 1);
                    if (new_question_index_1 >= deleted_question_index) {
                        new_question_index_1 = deleted_question_index - 1;
                    }
                    _this.$http.delete(_this.urlService.getHost() + '/question/' + _this.data.wall._id + '/' + question._id)
                        .then(function () {
                        if (new_question_index_1 > -1) {
                            _this.setQuestion(new_question_index_1, null, null);
                        }
                        successCallbackFn(200);
                    }, function () {
                        console.log('Error deleting question');
                    });
                }
                else {
                    successCallbackFn(401);
                }
            }, function (error) {
                console.log('--> DataService deleteQuestion: getMessages failure: ' + error);
                errorCallbackFn(error);
            });
        };
        //generate a new message on server with _id and returns it
        DataService.prototype.addMessage = function (successCallbackFn, errorCallbackFn) {
            var _this = this;
            var nickname = this.data.status.nickname;
            if (this.data.status.messageToEdit === null) {
                errorCallbackFn({ status: '400', message: "message is not defined" });
            }
            this.data.status.messageToEdit.edits.push({ date: new Date(), text: this.data.status.messageToEdit.text });
            var clientType = this.data.status.authorised ? '/messageteacher' : '/message';
            this.$http.post(this.urlService.getHost() + clientType, {
                message: this.data.status.messageToEdit,
                wall_id: this.data.wall._id,
                nickname: nickname
            }).then(function (result) {
                var resultKey = 'result';
                _this.data.question.messages.push(new TalkwallApp.Message().updateMe(result.data[resultKey]));
                _this.parseMessageForTags(result.data[resultKey]);
                _this.data.status.messageToEdit = null;
                if (_this.data.status.updateOrigin) {
                    //the new cloned message was created from a message on the board, so remove my nickname from the old one
                    delete _this.data.status.messageOrigin.board[_this.data.status.nickname];
                    _this.$http.put(_this.urlService.getHost() + clientType, {
                        messages: [_this.data.status.messageOrigin],
                        wall_id: _this.data.wall._id,
                        nickname: _this.data.status.nickname,
                        controlString: 'position'
                    })
                        .then(function (data) {
                        var resultKey = 'result';
                        _this.setMessageToEdit(null);
                        _this.data.status.updateOrigin = false;
                        if (_this.data.status.messageOrigin !== null) {
                            _this.data.status.messageOrigin = null;
                        }
                        //update the messages array with the updated object, so that all references are in turn updated
                        var idKey = '_id';
                        _this.data.question.messages.forEach(function (m) {
                            if (m._id === data[resultKey][idKey]) {
                                m.updateMe(data[resultKey]);
                            }
                        });
                    }, function (error) {
                        console.log('--> DataService: updateMessage failure: ' + error);
                        //TODO: fire a notification with the problem
                    });
                }
                else {
                    //make sure to reset the message origin ...
                    _this.data.status.messageOrigin = null;
                }
                if (typeof successCallbackFn === "function") {
                    successCallbackFn();
                }
            }, function (error) {
                console.log('--> DataService: getQuestion failure: ' + error);
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        DataService.prototype.getMessages = function () {
            var _this = this;
            if (this.data.question !== null) {
                this.$http.get(this.urlService.getHost() + '/messages/' + this.data.question._id)
                    .then(function (result) {
                    _this.data.question.messages = [];
                    var resultKey = 'result';
                    result.data[resultKey].forEach(function (m) {
                        _this.data.question.messages.push(new TalkwallApp.Message().updateMe(m));
                    });
                    _this.buildTagArray();
                    _this.refreshBoardMessages();
                }, function (error) {
                    console.log('--> DataService: getMessages failure: ' + error);
                });
            }
        };
        DataService.prototype.buildTagArray = function () {
            var handle = this;
            this.data.status.tagCounter = {};
            this.data.status.tags = [];
            this.data.question.messages.forEach(function (message) {
                if (!message.deleted) {
                    handle.parseMessageForTags(message);
                }
            });
        };
        DataService.prototype.parseMessageForTags = function (message) {
            var _this = this;
            if (message !== null) {
                var foundTags = this.utilityService.getPossibleTags(message.text);
                if (foundTags !== null) {
                    foundTags.forEach(function (tag) {
                        if (_this.data.status.tags.indexOf(tag) === -1) {
                            _this.data.status.tags.push(tag);
                            var tid = [];
                            tid.push(message._id);
                            _this.data.status.tagCounter[tag] = tid;
                        }
                        else {
                            var tid = _this.data.status.tagCounter[tag];
                            if (tid.indexOf(message._id) === -1) {
                                tid.push(message._id);
                                _this.data.status.tagCounter[tag] = tid;
                            }
                        }
                    });
                    console.log('--> Dataservice: parseMessageForTags: ' + foundTags);
                }
                else {
                    if (this.data.status.tags.indexOf(this.noTag) === -1) {
                        this.data.status.tags.push(this.noTag);
                        this.data.status.tagCounter[this.noTag] = [message._id];
                    }
                    else {
                        this.data.status.tagCounter[this.noTag].push(message._id);
                    }
                }
            }
        };
        // Convert position updates from dictionary into an array to send to server
        DataService.prototype.sendPendingPositionUpdates = function () {
            var messages = [];
            for (var message_id in this.data.status.restrictPositionRequestMessages) {
                if (this.data.status.restrictPositionRequestMessages.hasOwnProperty(message_id)) {
                    messages.push(this.data.status.restrictPositionRequestMessages[message_id]);
                }
            }
            this.data.status.restrictPositionRequestMessages = {};
            if (messages.length > 0) {
                this.updateMessages(messages, 'position');
            }
        };
        // Update messages on the server
        DataService.prototype.updateMessages = function (messages, controlString) {
            var _this = this;
            // Queue the updated message to be sent later
            if (this.data.status.restrictPositionRequests && controlString === 'position') {
                messages.forEach(function (message) {
                    _this.data.status.restrictPositionRequestMessages[message._id] = message;
                });
            }
            else {
                // Send updated messages to the server
                var clientType = this.data.status.authorised ? '/messageteacher' : '/message';
                this.$http.put(this.urlService.getHost() + clientType, {
                    messages: messages,
                    wall_id: this.data.wall._id,
                    nickname: this.data.status.nickname,
                    controlString: controlString
                })
                    .then(function (data) {
                    var resultKey = 'result';
                    var idKey = '_id';
                    _this.clearMessageToEdit();
                    //update the messages array with the updated object, so that all references are in turn updated
                    _this.data.question.messages.forEach(function (m) {
                        if (m._id === data.data[resultKey][idKey]) {
                            m.updateMe(data.data[resultKey]);
                            _this.parseMessageForTags(data.data[resultKey]);
                        }
                    });
                }, function (error) {
                    console.log('--> DataService: updateMessage failure: ' + error);
                    //this.data.status.messageToEdit = message;
                });
            }
        };
        DataService.prototype.getParticipants = function () {
            return this.data.status.participants;
        };
        DataService.prototype.setBoardDivSize = function (newSize) {
            console.log('--> Dataservice: setBoardDivSize: ' + angular.toJson(newSize));
            this.data.status.phoneMode = this.$mdMedia('max-width: 960px');
            this.data.status.boardDivSize = newSize;
        };
        DataService.prototype.getBackgroundColour = function () {
            var bgColourKey = 'BACKGROUND_COLOURS';
            return this.constants.constants[bgColourKey][this.data.status.currentQuestionIndex];
        };
        DataService.prototype.getGridStyle = function (type) {
            var heightKey = 'VIEW_HEIGHT', widthKey = 'VIEW_WIDTH', cpColourKey = 'COMPLEMENTARY_COLOURS';
            if (type === 'horizontal') {
                return {
                    top: Math.floor(this.data.status.boardDivSize[heightKey] / 2) + 'px',
                    position: 'absolute',
                    borderColor: this.constants.constants[cpColourKey][this.data.status.currentQuestionIndex],
                    backgroundColor: this.constants.constants[cpColourKey][this.data.status.currentQuestionIndex],
                    margin: 0
                };
            }
            else {
                return {
                    left: Math.floor(this.data.status.boardDivSize[widthKey] / 2) + 'px',
                    position: 'absolute',
                    borderColor: this.constants.constants[cpColourKey][this.data.status.currentQuestionIndex],
                    backgroundColor: this.constants.constants[cpColourKey][this.data.status.currentQuestionIndex],
                    margin: 0
                };
            }
        };
        //  Run the polling timer
        DataService.prototype.startPolling = function () {
            var handle = this;
            function requestThePoll() {
                handle.requestPoll('none', 'none', null, null);
            }
            // Begin further requests at time intervals
            if (this.pollingTimerHandle === null) {
                this.pollingTimerHandle = this.$interval(requestThePoll, this.constants.constants['POLL_INTERVAL_SECONDS'] * 1000);
            }
        };
        // Stop the polling timer
        DataService.prototype.stopPolling = function () {
            this.$interval.cancel(this.pollingTimerHandle);
            this.pollingTimerHandle = null;
        };
        // Process updated messages retrieved on the poll response
        DataService.prototype.processUpdatedMessages = function (pollUpdateObject) {
            var _this = this;
            // Update participant list
            var participants = Object.keys(pollUpdateObject.status.connected_students);
            this.data.status.participants = participants.concat(Object.keys(pollUpdateObject.status.connected_teachers));
            // We should not be here! Go back to the landing page
            if (this.data.status.participants.indexOf(this.data.status.nickname) === -1) {
                this.$window.location.href = this.urlService.getHost() + '/';
            }
            // Run on teacher connections only
            if (this.data.status.authorised) {
                // Update total number of talkwall users
                this.data.status.totalOnTalkwall = pollUpdateObject.totalOnTalkwall;
                this.data.status.idleTerminationTime = pollUpdateObject.status.idleTerminationTime;
            }
            else {
                // Status update
                if (pollUpdateObject.status.last_update > this.data.status.last_status_update) {
                    this.data.status.last_status_update = pollUpdateObject.status.last_update;
                    // Refresh the wall
                    this.getClientWall({ nickname: this.data.status.nickname, pin: this.data.wall.pin }, function () {
                        // Set a new question if available
                        var new_question_id = pollUpdateObject.status.teacher_current_question;
                        if (new_question_id !== 'none') {
                            var new_question_index = TalkwallApp.UtilityService.getQuestionIndexFromWallById(new_question_id, _this.data.wall);
                            // Trigger a question and message update
                            _this.data.question = null;
                            _this.setQuestion(new_question_index, null, null);
                        }
                    }, null);
                }
            }
            // Check that a deleted user is removed the contributor list
            var self = this;
            function checkAndRemoveDeletedContributor(nickname) {
                var counter = 0, foundIndex = -1;
                self.data.status.contributors.forEach(function (user, index) {
                    if (user === nickname) {
                        foundIndex = index;
                        counter++;
                    }
                });
                if (counter === 1) {
                    self.data.status.contributors.splice(foundIndex, 1);
                }
                counter = 0;
                foundIndex = -1;
                self.data.status.unselected_contributors.forEach(function (user, index) {
                    if (user === nickname) {
                        foundIndex = index;
                        counter++;
                    }
                });
                if (counter === 1) {
                    self.data.status.unselected_contributors.splice(foundIndex, 1);
                }
            }
            // Message notifications (newly created messages)
            for (var message_id in pollUpdateObject.created) {
                var message = new TalkwallApp.Message().updateMe(pollUpdateObject.created[message_id]);
                this.data.question.messages.push(message);
                this.parseMessageForTags(message);
                // Check that the user is in the contributor list
                if (this.data.status.contributors.indexOf(message.creator) === -1) {
                    this.data.status.contributors.push(message.creator);
                }
            }
            // Message notifications (updated messages)
            for (var message_id in pollUpdateObject.updated) {
                var update = pollUpdateObject.updated[message_id];
                var message = this.utilityService.getMessageFromQuestionById(message_id, this.data.question);
                if (message !== null) {
                    switch (pollUpdateObject.updated[message_id].updateType) {
                        case 'edit':
                            message.text = update.text;
                            message.deleted = update.deleted;
                            if (message.deleted) {
                                checkAndRemoveDeletedContributor(message.creator);
                            }
                            break;
                        case 'position':
                            message.updateBoard(update.board);
                            break;
                        case 'mixed':
                            message.text = update.text;
                            message.deleted = update.deleted;
                            if (message.deleted) {
                                checkAndRemoveDeletedContributor(message.creator);
                            }
                            message.updateBoard(update.board);
                            break;
                    }
                }
                this.parseMessageForTags(message);
                this.refreshBoardMessages();
            }
        };
        DataService.prototype.refreshBoardMessages = function () {
            this.$rootScope.$broadcast('talkwallMessageUpdate', this.data.status.selectedParticipant);
        };
        DataService.prototype.showClosingDialog = function () {
            //detects if the device is small
            // let useFullScreen = (this.$mdMedia('sm') || this.$mdMedia('xs'))  && this.customFullscreen;
            var disconnect = function () {
                var url = this.urlService.getHost() + '/#/';
                this.$http.get(url + 'disconnect/' + this.data.status.nickname + '/' + this.data.wall._id + '/' + this.data.question._id)
                    .then(function () {
                    this.$window.location.href = url;
                });
            };
            //show the dialog
            this.$mdDialog.show({
                controller: TalkwallApp.CloseController,
                controllerAs: 'closeC',
                templateUrl: 'js/components/close/close.html',
                parent: angular.element(document.body),
                clickOutsideToClose: false
            })
                .then(function () {
                console.log('--> ClosingController: answered');
                disconnect();
            }, function () {
                //dialog dismissed
                console.log('--> LandingController: dismissed');
                disconnect();
            });
        };
        DataService.prototype.getExportWall = function (wallId, successCallbackFn, errorCallbackFn) {
            this.$http.get(this.urlService.getHost() + '/export/' + wallId).then(function (success) {
                var resultKey = 'result', dataKey = 'data'; // statusKey = 'status';
                if (typeof successCallbackFn === "function") {
                    successCallbackFn(success[dataKey][resultKey]);
                }
            }, function (error) {
                // Close client wall if wall was closed by teacher
                if (typeof errorCallbackFn === "function") {
                    errorCallbackFn({ status: error.status, message: error.message });
                }
            });
        };
        DataService.$inject = ['$http', '$window', '$routeParams', '$rootScope', '$location', '$interval', '$timeout', '$mdDialog', '$translate',
            'UtilityService', 'URLService', '$mdMedia', 'TalkwallConstants'];
        return DataService;
    }());
    TalkwallApp.DataService = DataService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="authenticationservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var TokenInterceptor = (function () {
        function TokenInterceptor($q, $window, $location, authenticationService) {
            var _this = this;
            this.$q = $q;
            this.$window = $window;
            this.$location = $location;
            this.authenticationService = authenticationService;
            this.request = function (config) {
                var tKey = 'token', aKey = 'Authorization';
                config.headers = config.headers || {};
                if (_this.$window.sessionStorage[tKey]) {
                    config.headers[aKey] = 'Bearer ' + _this.$window.sessionStorage[tKey];
                }
                return config;
            };
            this.requestError = function (rejection) {
                return _this.$q.reject(rejection);
            };
            this.response = function (response) {
                var tKey = 'token', sKey = 'status';
                if (response !== null && response[sKey] === 200 && _this.$window.sessionStorage[tKey]
                    && !_this.authenticationService.isAuthenticated) {
                    _this.authenticationService.isAuthenticated = true;
                    console.log('TokenInterceptor: client already authenticated: ' + _this.$window.sessionStorage[tKey]);
                }
                return response || _this.$q.when(response);
            };
            this.responseError = function (rejection) {
                var tKey = 'token';
                if (rejection !== null && rejection.status === 401 && (_this.$window.sessionStorage[tKey]
                    || _this.authenticationService.isAuthenticated)) {
                    delete _this.$window.sessionStorage[tKey];
                    _this.authenticationService.isAuthenticated = false;
                    console.log('TokenInterceptor: client NOT authenticated');
                    _this.$location.path("/login");
                }
                return _this.$q.reject(rejection);
            };
            console.log('--> ITokenInterceptor started ...');
        }
        TokenInterceptor.$inject = ['$q', '$window', '$location', 'AuthenticationService'];
        return TokenInterceptor;
    }());
    TalkwallApp.TokenInterceptor = TokenInterceptor;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    AutoResize.$inject = ['$window'];
    function AutoResize($window) {
        var link = function (scope, element, attrs) {
            function initializeWindowSize() {
                var mhKey = 'maxHeight', whKey = 'windowHeight', wwKey = 'windowWidth';
                scope[mhKey] = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight, window.innerHeight);
                scope[whKey] = $window.innerHeight;
                scope[wwKey] = $window.innerWidth;
            }
            initializeWindowSize();
            scope.$watch('__height', function () {
                initializeWindowSize();
            });
            angular.element($window).bind('resize', function () {
                initializeWindowSize();
                return scope.$apply();
            });
        };
        return {
            link: link
        };
    }
    TalkwallApp.AutoResize = AutoResize;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../models/models.ts"/>
/// <reference path="../../services/dataservice.ts"/>
/// <reference path="../../services/utilityservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var FeedMessageController = (function () {
        function FeedMessageController(isolatedScope, dataService, $document, utilityService, $window) {
            this.isolatedScope = isolatedScope;
            this.dataService = dataService;
            this.$document = $document;
            this.utilityService = utilityService;
            this.$window = $window;
            this.showControls = false;
            this.message = isolatedScope.data;
            if (typeof this.message.origin !== 'undefined') {
                if (this.message.board === undefined) {
                    this.message.board = {};
                }
                this.message.isHighlighted = false;
                this.message.isHighlighted = (this.isPinned() && this.message.board[this.isolatedScope.selectedParticipant].highlighted);
            }
        }
        ;
        FeedMessageController.prototype.isPinned = function () {
            return (typeof this.message.board !== 'undefined' && typeof this.message.board[this.isolatedScope.selectedParticipant] !== 'undefined');
        };
        FeedMessageController.prototype.deleteMessage = function () {
            //check if authenticated or author
            if (this.message.creator === this.dataService.data.status.nickname || this.dataService.data.status.authorised) {
                this.message.deleted = true;
                this.dataService.updateMessages([this.message], 'edit');
            }
        };
        FeedMessageController.prototype.editMessage = function () {
            if (this.message.creator === this.dataService.data.status.nickname) {
                this.dataService.setMessageToEdit(this.message);
                this.isolatedScope.showEditPanel();
                this.showControls = false;
            }
            else {
                this.dataService.setMessageOrigin(this.message);
                this.dataService.setMessageToEdit(null);
                this.isolatedScope.showEditPanel();
                this.showControls = false;
            }
        };
        FeedMessageController.prototype.togglePinMessage = function () {
            if (this.isPinned()) {
                delete this.message.board[this.dataService.data.status.nickname];
            }
            else {
                this.message.board[this.dataService.data.status.nickname] = new TalkwallApp.Nickname(this.utilityService.getRandomBetween(45, 55) / 100, this.utilityService.getRandomBetween(45, 55) / 100, false);
            }
            this.dataService.updateMessages([this.message], 'position');
        };
        FeedMessageController.prototype.toggleHighlightMessage = function () {
            if (this.dataService.data.status.selectedParticipant === this.dataService.data.status.nickname) {
                this.message.board[this.dataService.data.status.nickname].highlighted
                    = !this.message.board[this.dataService.data.status.nickname].highlighted;
                this.message.isHighlighted = this.message.board[this.dataService.data.status.nickname].highlighted;
                this.dataService.updateMessages([this.message], 'position');
            }
        };
        FeedMessageController.prototype.persistPosition = function (xPercentage, yPercentage) {
            this.message.board[this.isolatedScope.selectedParticipant].xpos = xPercentage;
            this.message.board[this.isolatedScope.selectedParticipant].ypos = yPercentage;
            this.dataService.updateMessages([this.message], 'position');
        };
        FeedMessageController.prototype.getPinnedClass = function () {
            if (this.isPinned() && this.isolatedScope.onBoard === 'false') {
                return 'feedMessage-messageSelected';
            }
            else if (this.isolatedScope.onBoard === 'true' && this.message.board[this.isolatedScope.selectedParticipant].highlighted) {
                return 'feedMessage-messageOnBoardSelected';
            }
            else {
                return 'feedMessage-messageNotSelected';
            }
        };
        FeedMessageController.$inject = ['$scope', 'DataService', '$document', 'UtilityService', '$window'];
        return FeedMessageController;
    }());
    function linker(isolatedScope, element, attributes, ctrl) {
        var viewWidthKey = 'VIEW_WIDTH', viewHeightKey = 'VIEW_HEIGHT';
        var messageWidth = element.prop('offsetWidth');
        var messageHeight = element.prop('offsetHeight');
        var currentSize = ctrl.dataService.data.status.boardDivSize;
        var offset = null;
        var pixelPosition = { x: 0, y: 0 };
        var participant = null;
        /*
        if (isolatedScope.onBoard === 'true') {
            positionMessage();
            //need a watch here, to refresh the position when the selected contributor or message position changes
            isolatedScope.$watch(() => { return ctrl.message.board[isolatedScope.selectedParticipant] }, (newValue) => { positionCSS() }, true);
        }
        */
        isolatedScope.$on("talkwallMessageUpdate", function (event, newParticipant) {
            if (isolatedScope.onBoard === 'true') {
                if (typeof ctrl.message.board !== 'undefined' && typeof ctrl.message.board[newParticipant] !== 'undefined') {
                    participant = ctrl.message.board[newParticipant];
                    setMessageCss();
                }
            }
        });
        function setMessageCss() {
            element.css({
                top: participant.ypos * 100 + '%',
                left: participant.xpos * 100 + '%'
            });
        }
        function positionMessage() {
            element.on('mousedown touchstart', function (event) {
                // Prevent default dragging of selected content
                event.preventDefault();
                currentSize = ctrl.dataService.data.status.boardDivSize;
                messageWidth = element.prop('offsetWidth');
                messageHeight = element.prop('offsetHeight');
                if (event instanceof MouseEvent) {
                    offset = {
                        x: event.pageX - element.prop('offsetLeft'),
                        y: event.pageY - element.prop('offsetTop'),
                        originalX: event.pageX,
                        originalY: event.pageY
                    };
                    ctrl.$document.on('mousemove', mousemove);
                    ctrl.$document.on('mouseup', mouseup);
                }
                else if (event instanceof TouchEvent) {
                    var offsetLeft = element.prop('offsetLeft');
                    var offsetRight = element.prop('offsetTop');
                    offset = {
                        x: event['targetTouches'][0].pageX - offsetLeft,
                        y: event['targetTouches'][0].pageY - offsetRight,
                        originalX: event.pageX,
                        originalY: event.pageY
                    };
                    element.on('touchmove', touchmove);
                    element.on('touchend', touchend);
                }
                ctrl.dataService.stopPolling();
                ctrl.dataService.restrictRequests();
            });
        }
        function mousemove(event) {
            pixelPosition.x = event.pageX - offset.x;
            pixelPosition.y = event.pageY - offset.y;
            doMove();
        }
        function touchmove(event) {
            event.preventDefault();
            pixelPosition.x = event['targetTouches'][0].pageX - offset.x;
            pixelPosition.y = event['targetTouches'][0].pageY - offset.y;
            doMove();
        }
        function doMove() {
            if (pixelPosition.x < 0) {
                pixelPosition.x = 0;
            }
            if (pixelPosition.x > (currentSize[viewWidthKey] - messageWidth)) {
                pixelPosition.x = (currentSize[viewWidthKey] - messageWidth);
            }
            if (pixelPosition.y < 0) {
                pixelPosition.y = 0;
            }
            if (pixelPosition.y > (currentSize[viewHeightKey] - messageHeight)) {
                pixelPosition.y = (currentSize[viewHeightKey] - messageHeight);
            }
            /*
            element.css({
                top: pixelPosition.y + 'px',
                left: pixelPosition.x + 'px'
            });
            */
            participant.xpos = pixelPosition.x / currentSize[viewWidthKey];
            participant.ypos = pixelPosition.y / currentSize[viewHeightKey];
            setMessageCss();
        }
        function mouseup(event) {
            var diffX = offset.originalX - event.pageX;
            var diffY = offset.originalY - event.pageY;
            //will only persist if move greater than a 10 * 10px box
            if ((diffX >= 10 || diffX <= -10 || diffY >= 10 || diffY <= -10) && isolatedScope.selectedParticipant === ctrl.dataService.data.status.nickname) {
                //ctrl.message.board[isolatedScope.selectedParticipant] = participant;
                ctrl.persistPosition(participant.xpos, participant.ypos);
            }
            ctrl.$document.off('mousemove', mousemove);
            ctrl.$document.off('mouseup', mouseup);
            ctrl.dataService.startPolling();
        }
        function touchend(event) {
            var diffX = offset.originalX - event.pageX;
            var diffY = offset.originalY - event.pageY;
            //will only persist if move greater than a 10 * 10px box
            if ((diffX >= 10 || diffX <= -10 || diffY >= 10 || diffY <= -10) && isolatedScope.selectedParticipant === ctrl.dataService.data.status.nickname) {
                ctrl.persistPosition(participant.xpos, participant.ypos);
            }
            event.preventDefault();
            element.off('touchmove', touchmove);
            element.off('touchend', touchend);
            ctrl.dataService.startPolling();
        }
        if (isolatedScope.onBoard === 'true') {
            participant = ctrl.message.board[isolatedScope.selectedParticipant];
            positionMessage();
            setMessageCss();
        }
    }
    //directive declaration
    function FeedMessage() {
        return {
            restrict: 'A',
            scope: {
                data: '=',
                showEditPanel: "&",
                onBoard: "@",
                selectedParticipant: '@'
            },
            templateUrl: 'js/components/feedMessage/feedMessage.html',
            controller: FeedMessageController,
            controllerAs: 'feedMessageC',
            link: linker,
            replace: true
        };
    }
    TalkwallApp.FeedMessage = FeedMessage;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../models/models.ts"/>
/// <reference path="../../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var TaskController = (function () {
        function TaskController(isolatedScope, dataService, $mdDialog) {
            this.isolatedScope = isolatedScope;
            this.dataService = dataService;
            this.$mdDialog = $mdDialog;
            this.showControls = false;
            this.question = isolatedScope.data;
        }
        ;
        /**
         * init
         */
        TaskController.prototype.activate = function () {
            console.log('--> TaskController activated');
        };
        TaskController.prototype.deleteQuestion = function (ev) {
            console.log('--> TaskController delete');
            var handle = this;
            this.dataService.deleteQuestion(this.question, function (code) {
                if (code === 401) {
                    handle.$mdDialog.show(handle.$mdDialog.alert()
                        .clickOutsideToClose(true)
                        .title('Question not deleted')
                        .textContent('This question contains messages and cannot be deleted anymore.')
                        .ok('OK'));
                }
                else {
                    //200 => set question to 0
                    handle.dataService.setQuestion(0, function () {
                        //success
                    }, function () {
                        //error
                    });
                }
            }, function (error) {
                console.log('--> TaskController deleteQuestion error: ' + error);
            });
        };
        TaskController.prototype.editQuestion = function () {
            console.log('--> TaskController edit');
            this.dataService.setQuestionToEdit(this.question);
        };
        TaskController.$inject = ['$scope', 'DataService', '$mdDialog'];
        return TaskController;
    }());
    //directive declaration
    function Task() {
        return {
            restrict: 'A',
            scope: {
                data: '='
            },
            templateUrl: 'js/components/task/task.html',
            controller: TaskController,
            controllerAs: 'taskC',
            replace: true
        };
    }
    TalkwallApp.Task = Task;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var WatchBoardSizeController = (function () {
        function WatchBoardSizeController(dataService, $window) {
            this.dataService = dataService;
            this.$window = $window;
        }
        ;
        WatchBoardSizeController.$inject = ['DataService', '$window'];
        return WatchBoardSizeController;
    }());
    function linker(scope, element, attrs, ctrl) {
        var w = angular.element(ctrl.$window);
        scope.getWindowDimensions = function () {
            return {
                'VIEW_HEIGHT': element.prop('offsetHeight'),
                'VIEW_WIDTH': element.prop('offsetWidth')
            };
        };
        scope.$watch(scope.getWindowDimensions, function (newValue, oldValue) {
            ctrl.dataService.setBoardDivSize(newValue);
        }, true);
        w.bind('resize', function () {
            scope.$apply();
        });
        ctrl.dataService.setBoardDivSize(scope.getWindowDimensions());
    }
    function WatchBoardSize() {
        return {
            restrict: 'A',
            controller: WatchBoardSizeController,
            link: linker
        };
    }
    TalkwallApp.WatchBoardSize = WatchBoardSize;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var LoginController = (function () {
        function LoginController($mdDialog) {
            this.$mdDialog = $mdDialog;
            console.log('--> LoginController: started: ');
        }
        /**
         * hide this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        LoginController.prototype.hide = function (response) {
            console.log('--> LoginController: hide');
            this.$mdDialog.hide();
        };
        ;
        /**
         * cancel this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        LoginController.prototype.cancel = function (response) {
            console.log('--> LoginController: cancel');
            this.$mdDialog.cancel();
        };
        ;
        /**
         * answer this dialog
         * @aparam answer aa a string
         */
        LoginController.prototype.answer = function (answer) {
            console.log('--> LoginController: answer: ' + answer);
            this.$mdDialog.hide(answer);
        };
        ;
        LoginController.$inject = ['$mdDialog'];
        return LoginController;
    }());
    TalkwallApp.LoginController = LoginController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var JoinController = (function () {
        function JoinController($mdDialog, $document) {
            this.$mdDialog = $mdDialog;
            this.$document = $document;
            this.joinModel = {
                nickname: "",
                pin: NaN
            };
            console.log('--> LoginController: started: ');
        }
        /**
         * hide this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        JoinController.prototype.hide = function (response) {
            console.log('--> JoinController: hide');
            this.$document[0].activeElement['blur']();
            this.$mdDialog.hide();
        };
        ;
        /**
         * cancel this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        JoinController.prototype.cancel = function (response) {
            this.$document[0].activeElement['blur']();
            console.log('--> JoinController: cancel');
            this.$mdDialog.cancel();
        };
        ;
        /**
         * answer this dialog
         * @aparam answer aa a string
         */
        JoinController.prototype.answer = function () {
            if (this.joinModel.nickname.length > 0 && this.joinModel.pin > 999 && this.joinModel.pin < 10000) {
                this.$document[0].activeElement['blur']();
                this.$mdDialog.hide(this.joinModel);
            }
        };
        ;
        JoinController.$inject = ['$mdDialog', '$document'];
        return JoinController;
    }());
    TalkwallApp.JoinController = JoinController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
/// <reference path="../login/login.ts"/>
/// <reference path="../join/join.ts"/>
/// <reference path="../../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var LandingController = (function () {
        function LandingController(urlService, $translate, $mdMedia, $mdDialog, $window, dataService) {
            this.urlService = urlService;
            this.$translate = $translate;
            this.$mdMedia = $mdMedia;
            this.$mdDialog = $mdDialog;
            this.$window = $window;
            this.dataService = dataService;
            this.languageCode = 'no';
            console.log('--> LandingController: started');
            var langKey = 'lang';
            this.languageCode = this.$window.sessionStorage[langKey];
            this.$translate.use(this.languageCode);
            this.customFullscreen = this.$mdMedia('xs') || this.$mdMedia('sm');
        }
        /**
         * display an advanced dialog for the login, and catches it's events
         */
        LandingController.prototype.showLoginDialog = function (ev) {
            var _this = this;
            var handle = this;
            //detects if the device is small
            var useFullScreen = (this.$mdMedia('sm') || this.$mdMedia('xs')) && this.customFullscreen;
            //show the dialog
            this.$mdDialog.show({
                controller: TalkwallApp.LoginController,
                controllerAs: 'loginC',
                templateUrl: 'js/components/login/login.html',
                targetEvent: ev,
                clickOutsideToClose: true
            })
                .then(function (answer) {
                _this.$window.blur();
                //dialog answered
                console.log('--> LandingController: answer: ' + answer);
                handle.$window.location.href = handle.urlService.getHost() + answer;
            }, function () {
                _this.$window.blur();
                //dialog dismissed
                console.log('--> LandingController: dismissed');
            });
        };
        ;
        /**
         * display dialog for joining with pin and nickname
         */
        LandingController.prototype.showJoinDialog = function (ev) {
            var _this = this;
            var handle = this;
            //detects if the device is small
            var useFullScreen = (this.$mdMedia('sm') || this.$mdMedia('xs')) && this.customFullscreen;
            //show the dialog
            this.$mdDialog.show({
                controller: TalkwallApp.JoinController,
                controllerAs: 'joinC',
                templateUrl: 'js/components/join/join.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true
            })
                .then(function (joinModel) {
                _this.$window.blur();
                handle.dataService.getClientWall(joinModel, function () {
                    handle.$window.location.href = handle.urlService.getHost() + '/#/wall';
                }, null);
            }, function () {
                _this.$window.blur();
                //dialog dismissed
                console.log('--> LandingController: dismissed');
            });
        };
        LandingController.$inject = ['URLService', '$translate', '$mdMedia', '$mdDialog', '$window', 'DataService'];
        return LandingController;
    }());
    TalkwallApp.LandingController = LandingController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../models/models.ts"/>
/// <reference path="../../services/urlservice.ts"/>
/// <reference path="../../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var ExportController = (function () {
        function ExportController(dataService, $routeParams, $mdDialog) {
            this.dataService = dataService;
            this.$routeParams = $routeParams;
            this.$mdDialog = $mdDialog;
            this.wall = null;
            this.selectedQuestionIndex = -1;
            console.log('--> ExportController: started');
            var handle = this;
            var wallKey = 'wid';
            var tokenParam = this.$routeParams[wallKey] || '';
            if (tokenParam !== '') {
                //look at the route params first for wall id
                console.log('--> DataService: token from parameter: ' + tokenParam);
                this.dataService.getExportWall(tokenParam, function (wall) {
                    handle.wall = wall;
                    //handle.wallDate = handle.getFormattedDate();
                }, function (error) {
                    console.log('--> ExportController: getExportWall: error: ' + angular.toJson(error));
                });
            }
            else {
                //no wall id provided, show an alert
                this.$mdDialog.show(this.$mdDialog.alert()
                    .clickOutsideToClose(true)
                    .title('Wall ID missing')
                    .textContent('Please provide a valid wall ID to export its content.' +
                    'The URL should be in the form: http://...talkwall.net/#/export?wid=WALL_ID')
                    .ok('OK'));
            }
        }
        ExportController.prototype.getFormattedDate = function (date) {
            if (date !== null) {
                return moment(date).format('DD/MM/YYYY - HH:mm');
            }
        };
        ExportController.prototype.getBoardMessagesForParticipant = function (participant, qid) {
            var result = new Array();
            var leftSorting = {};
            var rightSorting = {};
            var targetQuestion;
            this.wall.questions.forEach(function (question) {
                if (question._id === qid) {
                    targetQuestion = question;
                }
            });
            targetQuestion.messages.forEach(function (message) {
                if (message.board !== undefined && message.board[participant] !== undefined) {
                    if (message.board[participant].xpos < 0.5) {
                        leftSorting[message.board[participant].ypos] = message;
                    }
                    else {
                        rightSorting[message.board[participant].ypos] = message;
                    }
                }
            });
            var leftKeys = Object.keys(leftSorting);
            var rightKeys = Object.keys(rightSorting);
            for (var i = 0; i < leftKeys.length; i++) {
                result.push(leftSorting[leftKeys[i]]);
            }
            for (var i = 0; i < rightKeys.length; i++) {
                result.push(rightSorting[rightKeys[i]]);
            }
            return result;
        };
        ExportController.$inject = ['DataService', '$routeParams', '$mdDialog'];
        return ExportController;
    }());
    TalkwallApp.ExportController = ExportController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
/// <reference path="../../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var EditMessageController = (function () {
        function EditMessageController($mdBottomSheet, $document, $timeout, dataService) {
            var _this = this;
            this.$mdBottomSheet = $mdBottomSheet;
            this.$document = $document;
            this.$timeout = $timeout;
            this.dataService = dataService;
            this.boxHook = null;
            console.log('--> EditMessageController: started: ');
            this.messageToEdit = dataService.getMessageToEdit();
            this.$timeout(function () {
                _this.$document[0].activeElement['focus']();
            }, 100);
        }
        /**
         * hide this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        /*
        hide(response?: any): void {
            console.log('--> EditMessageController: hide');
            this.dataService.setMessageToEdit(null);
            this.$document[0].activeElement['blur']();
            this.$mdBottomSheet.hide();
        };
        */
        /**
         * cancel this dialog (see angular.material.IDialogService)
         * @aparam response a possible reponse
         */
        EditMessageController.prototype.cancel = function (response) {
            console.log('--> EditMessageController: cancel');
            this.dataService.setMessageToEdit(null);
            this.$document[0].activeElement['blur']();
            this.$mdBottomSheet.cancel();
        };
        ;
        /**
         * answer this dialog
         * @aparam answer aa a string
         */
        EditMessageController.prototype.answer = function () {
            console.log('--> EditMessageController: answered: ');
            this.$document[0].activeElement['blur']();
            this.$mdBottomSheet.hide();
            this.messageToEdit = null;
        };
        ;
        EditMessageController.$inject = ['$mdBottomSheet', '$document', '$timeout', 'DataService'];
        return EditMessageController;
    }());
    TalkwallApp.EditMessageController = EditMessageController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
/// <reference path="../../services/dataservice.ts"/>
/// <reference path="../../services/utilityservice.ts"/>
/// <reference path="../editMessagePanel/editMessagePanel.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var WallController = (function () {
        function WallController(dataService, $mdSidenav, $mdBottomSheet, $translate, $scope, $timeout, urlService, $window, utilityService) {
            var _this = this;
            this.dataService = dataService;
            this.$mdSidenav = $mdSidenav;
            this.$mdBottomSheet = $mdBottomSheet;
            this.$translate = $translate;
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.urlService = urlService;
            this.$window = $window;
            this.utilityService = utilityService;
            this.magnified = false;
            this.feedView = true;
            this.rightMenu1 = false;
            this.rightMenu2 = false;
            this.rightMenu3 = false;
            this.rightMenu4 = false;
            this.owneremail = undefined;
            this.savedGridType = 'none';
            this.noTag = 'no tag';
            console.log('--> WallController: started: ');
            $translate('NO_TAG').then(function (translation) {
                _this.noTag = translation;
            });
            this.dataService.checkAuthentication(function () {
                _this.activate();
            }, null);
        }
        WallController.prototype.activate = function () {
            var _this = this;
            if (this.dataService.getWall() === null) {
                this.$window.location.href = this.urlService.getHost() + '/#/';
            }
            else {
                var question_index = this.dataService.getWall().questions.length > 0 ? 0 : -1;
                this.setQuestion(question_index);
                if (this.dataService.data.status.authorised) {
                    this.rightMenu3 = true;
                    this.$mdSidenav('right').open();
                }
                this.selectedParticipant = this.dataService.data.status.nickname;
                this.dataService.data.status.selectedParticipant = this.selectedParticipant;
                this.$scope.$watch(function () { return _this.selectedParticipant; }, function (newVar, oldVar) {
                    if (newVar !== oldVar) {
                        _this.dataService.data.status.selectedParticipant = newVar;
                        _this.dataService.refreshBoardMessages();
                    }
                }, true);
                if (this.dataService.data.status.authorised &&
                    this.dataService.getAuthenticatedUser().defaultEmail !== undefined &&
                    this.dataService.getAuthenticatedUser().defaultEmail !== '') {
                    this.owneremail = this.dataService.getAuthenticatedUser().defaultEmail;
                }
                var handle_1 = this;
                //contributor filtering (for messages on the board)
                this.messageFilterByContributorOnBoard = function (message) {
                    return (!message.deleted &&
                        !handle_1.dataService.data.status.phoneMode &&
                        typeof message.board !== 'undefined' &&
                        typeof message.board[handle_1.selectedParticipant] !== 'undefined' &&
                        handle_1.dataService.data.status.unselected_contributors.indexOf(message.creator) === -1 &&
                        handle_1.messageTagsNotPresent(message));
                };
                //author+tag filtering (for messages in the feed)
                this.messageFilterByAuthorAndTag = function (message) {
                    return (!message.deleted && handle_1.dataService.data.status.unselected_contributors.indexOf(message.creator) === -1 && handle_1.messageTagsNotPresent(message));
                };
            }
        };
        WallController.prototype.messageTagsNotPresent = function (message) {
            var messageTags = this.utilityService.getPossibleTags(message.text);
            if (messageTags !== null) {
                var present = false;
                for (var i = 0; i < messageTags.length; i++) {
                    if (this.dataService.data.status.unselected_tags.indexOf(messageTags[i]) === -1) {
                        present = true;
                    }
                }
                return present;
            }
            else {
                return this.dataService.data.status.unselected_tags.indexOf(this.noTag) === -1;
            }
        };
        WallController.prototype.showFeed = function () {
            this.feedView = true;
            this.selectedParticipant = this.dataService.data.status.nickname;
            this.dataService.data.status.selectedParticipant = this.selectedParticipant;
            this.$mdSidenav('left').open();
        };
        WallController.prototype.showScreenContributors = function () {
            this.magnified = false;
            this.feedView = false;
            this.$mdSidenav('left').open();
        };
        WallController.prototype.setQuestion = function (index) {
            var _this = this;
            this.dataService.setQuestion(index, function () {
                if (_this.dataService.data.status.currentQuestionIndex !== -1) {
                    _this.savedGridType = _this.dataService.data.question.grid;
                }
            }, function () {
                //error
            });
        };
        WallController.prototype.closeWall = function (targetEmail) {
            this.dataService.closeWallNow(targetEmail);
            this.owneremail = undefined;
        };
        WallController.prototype.setGrid = function (type) {
            this.dataService.data.status.questionToEdit.grid = type;
        };
        WallController.prototype.questionToEditDirty = function () {
            if (this.dataService.data.status.questionToEdit === null || this.dataService.data.question === null) {
                return true;
            }
            else {
                return (this.dataService.data.status.questionToEdit.label !== this.dataService.data.question.label
                    && this.dataService.data.status.questionToEdit.label !== '')
                    || typeof this.dataService.data.status.questionToEdit._id !== 'undefined';
            }
        };
        /**** contributor filtering ******/
        WallController.prototype.contributorExists = function (item) {
            return this.dataService.data.status.unselected_contributors.indexOf(item) === -1;
        };
        ;
        WallController.prototype.contributorToggle = function (item) {
            var idx = this.dataService.data.status.unselected_contributors.indexOf(item);
            if (idx > -1) {
                this.dataService.data.status.unselected_contributors.splice(idx, 1);
            }
            else {
                this.dataService.data.status.unselected_contributors.push(item);
            }
        };
        ;
        WallController.prototype.aContributorIsChecked = function () {
            return this.dataService.data.status.unselected_contributors.length < this.dataService.data.status.contributors.length;
        };
        ;
        WallController.prototype.toggleAllContributors = function () {
            if (this.dataService.data.status.unselected_contributors.length === this.dataService.data.status.contributors.length) {
                this.dataService.data.status.unselected_contributors = [];
            }
            else {
                this.dataService.data.status.unselected_contributors = this.dataService.data.status.contributors.slice(0);
            }
        };
        ;
        /**** end contributor filtering ******/
        /**** tag filtering ******/
        WallController.prototype.tagExists = function (item) {
            return this.dataService.data.status.unselected_tags.indexOf(item) === -1;
        };
        ;
        WallController.prototype.tagToggle = function (item) {
            var idx = this.dataService.data.status.unselected_tags.indexOf(item);
            if (idx > -1) {
                this.dataService.data.status.unselected_tags.splice(idx, 1);
            }
            else {
                this.dataService.data.status.unselected_tags.push(item);
            }
        };
        ;
        WallController.prototype.tagIsChecked = function () {
            return this.dataService.data.status.unselected_tags.length !== this.dataService.data.status.tags.length;
        };
        ;
        WallController.prototype.toggleAllTags = function () {
            if (this.dataService.data.status.unselected_tags.length === this.dataService.data.status.tags.length) {
                this.dataService.data.status.unselected_tags = [];
            }
            else {
                this.dataService.data.status.unselected_tags = this.dataService.data.status.tags.slice(0);
            }
        };
        ;
        /**** end tag filtering ******/
        WallController.prototype.showMessageEditor = function (newMessage, event) {
            var _this = this;
            var handle = this;
            if (newMessage) {
                handle.dataService.setMessageToEdit(null);
            }
            this.dataService.stopPolling();
            this.showFeed();
            this.$mdBottomSheet.show({
                controller: TalkwallApp.EditMessageController,
                controllerAs: 'editMessageC',
                clickOutsideToClose: false,
                templateUrl: 'js/components/editMessagePanel/editMessagePanel.html'
            }).then(function () {
                //dialog answered
                _this.$window.document.activeElement['blur']();
                //post message to server and add returned object to question feed
                var message = handle.dataService.getMessageToEdit();
                if (message !== null) {
                    if (typeof message._id === 'undefined') {
                        console.log('--> WallController: Edit message - created');
                        handle.dataService.addMessage(function () {
                            //success
                        }, function () {
                            //TODO: handle message create error
                        });
                    }
                    else {
                        console.log('--> WallController: Edit message - edited');
                        handle.dataService.updateMessages([message], 'edit');
                    }
                }
                handle.dataService.startPolling();
            }, function () {
                //dialog dismissed
                _this.$window.document.activeElement['blur']();
                console.log('--> WallController: Edit message dismissed');
                handle.dataService.clearMessageToEdit();
                handle.dataService.startPolling();
            });
        };
        WallController.prototype.toggleRightMenu = function (n) {
            console.log('--> WallController: toggleRightMenu: ' + n);
            switch (n) {
                case 1:
                    this.rightMenu1 = !this.rightMenu1;
                    this.rightMenu2 = false;
                    this.rightMenu3 = false;
                    this.rightMenu4 = false;
                    break;
                case 2:
                    this.rightMenu1 = false;
                    this.rightMenu2 = !this.rightMenu2;
                    this.rightMenu3 = false;
                    this.rightMenu4 = false;
                    //this.selected_users = this.dataService.getParticipants().slice(0);
                    break;
                case 3:
                    this.rightMenu1 = false;
                    this.rightMenu2 = false;
                    this.rightMenu3 = !this.rightMenu3;
                    this.rightMenu4 = false;
                    break;
                case 4:
                    this.rightMenu1 = false;
                    this.rightMenu2 = false;
                    this.rightMenu3 = false;
                    this.rightMenu4 = !this.rightMenu4;
                    break;
                default:
                    this.rightMenu1 = false;
                    this.rightMenu2 = false;
                    this.rightMenu3 = false;
                    this.rightMenu4 = false;
            }
        };
        WallController.prototype.addQuestion = function () {
            this.dataService.data.status.questionToEdit = new TalkwallApp.Question('');
            this.dataService.data.status.questionToEdit.isNew = true;
        };
        WallController.prototype.cancelEditQuestion = function () {
            this.dataService.data.status.questionToEdit = null;
        };
        WallController.prototype.saveQuestion = function () {
            var _this = this;
            if (this.dataService.data.status.questionToEdit.isNew) {
                this.dataService.addQuestion(function () {
                    //set to the new question if none
                    if (_this.dataService.data.question === null) {
                        _this.setQuestion(0);
                    }
                    //clear the question to edit ...
                    _this.dataService.setQuestionToEdit(null);
                }, function () {
                    //TODO: handle question retrieval error
                });
            }
            else {
                this.dataService.updateQuestion(function () {
                    //set to the new question if none
                    if (_this.dataService.data.question === null) {
                        _this.setQuestion(0);
                    }
                    //clear the question to edit ...
                    _this.dataService.setQuestionToEdit(null);
                }, function () {
                    //TODO: handle question retrieval error
                });
            }
        };
        WallController.$inject = ['DataService', '$mdSidenav', '$mdBottomSheet', '$translate', '$scope', '$timeout', 'URLService', '$window', 'UtilityService'];
        return WallController;
    }());
    TalkwallApp.WallController = WallController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="_references.ts"/>
/// <reference path="app.config.ts"/>
/// <reference path="app.constants.ts"/>
/// <reference path="services/dataservice.ts"/>
/// <reference path="services/authenticationservice.ts"/>
/// <reference path="services/tokenservice.ts"/>
/// <reference path="services/urlservice.ts"/>
/// <reference path="services/utilityservice.ts"/>
/// <reference path="directives/autoresize.ts"/>
/// <reference path="components/feedMessage/feedMessage.ts"/>
/// <reference path="components/task/task.ts"/>
/// <reference path="directives/watchboardsize.ts"/>
/// <reference path="components/login/login.ts"/>
/// <reference path="components/join/join.ts"/>
/// <reference path="components/landing/landing.ts"/>
/// <reference path="components/archive/archive.ts"/>
/// <reference path="components/export/export.ts"/>
/// <reference path="components/wall/wall.ts"/>
/// <reference path="components/editMessagePanel/editMessagePanel.ts"/>
/// <reference path="app.run.ts"/>
/**
 * TalkwallApp core application module.
 * @preferred
 */
var TalkwallApp;
(function (TalkwallApp) {
    'use strict';
    /**
     * Array of dependencies to be injected in the application "dependencies".
     */
    var dependencies = [
        'ngRoute',
        'ngAria',
        'ngAnimate',
        'pascalprecht.translate',
        'ngMaterial'
    ];
    angular.module('TalkwallApp', dependencies)
        .constant('TalkwallConstants', TalkwallApp.TalkwallConstants)
        .config(TalkwallApp.configApp)
        .service('URLService', TalkwallApp.URLService)
        .service('DataService', TalkwallApp.DataService)
        .service('AuthenticationService', TalkwallApp.AuthenticationService)
        .service('TokenInterceptor', TalkwallApp.TokenInterceptor)
        .service('UtilityService', TalkwallApp.UtilityService)
        .directive('autoresize', TalkwallApp.AutoResize)
        .directive('watchBoardSize', TalkwallApp.WatchBoardSize)
        .directive('feedMessage', TalkwallApp.FeedMessage)
        .directive('task', TalkwallApp.Task)
        .controller('ArchiveWallController', TalkwallApp.ArchiveWallController)
        .controller('LoginController', TalkwallApp.LoginController)
        .controller('JoinController', TalkwallApp.JoinController)
        .controller('CloseController', TalkwallApp.CloseController)
        .controller('LandingController', TalkwallApp.LandingController)
        .controller('ExportController', TalkwallApp.ExportController)
        .controller('WallController', TalkwallApp.WallController)
        .controller('EditMessageController', TalkwallApp.EditMessageController)
        .run(TalkwallApp.runApp);
})(TalkwallApp || (TalkwallApp = {}));
