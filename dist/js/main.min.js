/// <reference path="../../typings/index.d.ts"/>
/// <reference path="_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    'use strict';
    configApp.$inject = ['$translateProvider', '$httpProvider', '$routeProvider'];
    function configApp($translateProvider, $httpProvider, $routeProvider) {
        // Routes
        $routeProvider.
            when('/wall', {
            templateUrl: 'js/components/wall/wall.html'
        })
            .when('/', {
            templateUrl: 'js/components/landing/landing.html'
        });
        // Token interceptor
        $httpProvider.interceptors.push('TokenInterceptor');
        // Translation
        $translateProvider.useSanitizeValueStrategy('escaped');
        $translateProvider.useStaticFilesLoader({
            prefix: './languages/',
            suffix: '.json'
        });
    }
    TalkwallApp.configApp = configApp;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    'use strict';
    runApp.$inject = ['$rootScope'];
    function runApp($rootScope) {
        console.log('--> runApp started');
    }
    TalkwallApp.runApp = runApp;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var URLService = (function () {
        function URLService($location) {
            this.$location = $location;
            this.domain = 'en';
            if (this.$location.host().indexOf('.no') > -1) {
                this.domain = 'no';
            }
            console.log('--> URLService started ... the locale used is: ' + this.domain);
        }
        URLService.prototype.getDomain = function () {
            return this.domain;
        };
        URLService.prototype.getURL = function () {
            return this.$location.protocol() + '://' + this.$location.host() + ':' + this.$location.port();
        };
        URLService.$inject = ["$location"];
        return URLService;
    }());
    TalkwallApp.URLService = URLService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var AuthenticationService = (function () {
        function AuthenticationService() {
            this._isAuthenticated = false;
        }
        Object.defineProperty(AuthenticationService.prototype, "isAuthenticated", {
            get: function () {
                return this._isAuthenticated;
            },
            set: function (value) {
                this._isAuthenticated = value;
            },
            enumerable: true,
            configurable: true
        });
        return AuthenticationService;
    }());
    TalkwallApp.AuthenticationService = AuthenticationService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="urlservice.ts"/>
/// <reference path="authenticationservice.ts"/>
/// <reference path="../models/models.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var DataService = (function () {
        function DataService($http, $window, $routeParams, $location) {
            this.$http = $http;
            this.$window = $window;
            this.$routeParams = $routeParams;
            this.$location = $location;
            console.log('--> DataService started ...');
        }
        DataService.prototype.checkAuthenticated = function () {
            var tKey = 't';
            var tokenParam = this.$routeParams[tKey] || '';
            var tokenKey = 'token';
            if (tokenParam !== '') {
                console.log('--> WallController: token from parameter');
                this.$window.sessionStorage[tokenKey] = tokenParam;
                this.$location.search(tKey, null);
                return true;
            }
            else if (this.$window.sessionStorage[tokenKey]) {
                console.log('--> WallController: token already existing');
                return true;
            }
            else {
                console.log('--> WallController: not authenticated');
                this.$location.path("/");
                return false;
            }
        };
        DataService.$inject = ['$http', '$window', '$routeParams', '$location'];
        return DataService;
    }());
    TalkwallApp.DataService = DataService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
/// <reference path="authenticationservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var TokenInterceptor = (function () {
        function TokenInterceptor($q, $window, $location, authenticationService) {
            var _this = this;
            this.$q = $q;
            this.$window = $window;
            this.$location = $location;
            this.authenticationService = authenticationService;
            this.request = function (config) {
                var tKey = 'token', aKey = 'Authorization';
                config.headers = config.headers || {};
                if (_this.$window.sessionStorage[tKey]) {
                    config.headers[aKey] = 'Bearer ' + _this.$window.sessionStorage[tKey];
                }
                return config;
            };
            this.requestError = function (rejection) {
                return _this.$q.reject(rejection);
            };
            this.response = function (response) {
                var tKey = 'token', sKey = 'status';
                if (response !== null && response[sKey] === 200 && _this.$window.sessionStorage[tKey]
                    && !_this.authenticationService.isAuthenticated) {
                    _this.authenticationService.isAuthenticated = true;
                    console.log('TokenInterceptor: client already authenticated: ' + _this.$window.sessionStorage[tKey]);
                }
                return response || _this.$q.when(response);
            };
            this.responseError = function (rejection) {
                var tKey = 'token';
                if (rejection !== null && rejection.status === 401 && (_this.$window.sessionStorage[tKey]
                    || _this.authenticationService.isAuthenticated)) {
                    delete _this.$window.sessionStorage[tKey];
                    _this.authenticationService.isAuthenticated = false;
                    console.log('TokenInterceptor: client NOT authenticated');
                    _this.$location.path("/login");
                }
                return _this.$q.reject(rejection);
            };
            console.log('--> ITokenInterceptor started ...');
        }
        TokenInterceptor.$inject = ['$q', '$window', '$location', 'AuthenticationService'];
        return TokenInterceptor;
    }());
    TalkwallApp.TokenInterceptor = TokenInterceptor;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var UtilityService = (function () {
        function UtilityService() {
            console.log('--> UtilityService started ...');
        }
        return UtilityService;
    }());
    TalkwallApp.UtilityService = UtilityService;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../_references.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    AutoResize.$inject = ['$window'];
    function AutoResize($window) {
        var link = function (scope, element, attrs) {
            function initializeWindowSize() {
                var mhKey = 'maxHeight', whKey = 'windowHeight', wwKey = 'windowWidth';
                scope[mhKey] = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight, window.innerHeight);
                scope[whKey] = $window.innerHeight;
                scope[wwKey] = $window.innerWidth;
            }
            initializeWindowSize();
            scope.$watch('__height', function () {
                initializeWindowSize();
            });
            angular.element($window).bind('resize', function () {
                initializeWindowSize();
                return scope.$apply();
            });
        };
        return {
            link: link
        };
    }
    TalkwallApp.AutoResize = AutoResize;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var LoginController = (function () {
        function LoginController(isolatedScope, $mdDialog) {
            this.isolatedScope = isolatedScope;
            this.$mdDialog = $mdDialog;
            console.log('--> LoginController: started: ');
        }
        LoginController.prototype.hide = function () {
            console.log('--> LoginController: hide');
            this.$mdDialog.hide();
        };
        ;
        LoginController.prototype.cancel = function () {
            console.log('--> LoginController: cancel');
            this.$mdDialog.cancel();
        };
        ;
        LoginController.prototype.answer = function (answer) {
            console.log('--> LoginController: answer: ' + answer);
            this.$mdDialog.hide(answer);
        };
        ;
        LoginController.$inject = ['$scope', '$mdDialog'];
        return LoginController;
    }());
    TalkwallApp.LoginController = LoginController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
/// <reference path="../login/login.ts"/>
/// <reference path="../../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var LandingController = (function () {
        function LandingController(urlService, $translate, $mdMedia, $mdDialog, isolatedScope, $window, dataService) {
            this.urlService = urlService;
            this.$translate = $translate;
            this.$mdMedia = $mdMedia;
            this.$mdDialog = $mdDialog;
            this.isolatedScope = isolatedScope;
            this.$window = $window;
            this.dataService = dataService;
            console.log('--> LandingController: started: ');
            this.$translate.use(this.urlService.getDomain());
            this.customFullscreen = this.$mdMedia('xs') || this.$mdMedia('sm');
        }
        LandingController.prototype.showLoginDialog = function (ev) {
            var handle = this;
            var useFullScreen = (this.$mdMedia('sm') || this.$mdMedia('xs')) && this.customFullscreen;
            this.$mdDialog.show({
                controller: TalkwallApp.LoginController,
                controllerAs: 'loginC',
                templateUrl: 'js/components/login/login.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true
            })
                .then(function (answer) {
                //answered
                console.log('--> LandingController: answer: ' + answer);
                handle.$window.location.href = handle.urlService.getURL() + answer;
            }, function () {
                //dismissed
                console.log('--> LandingController: dissmissed');
            });
            this.isolatedScope.$watch(function () {
                return handle.$mdMedia('xs') || handle.$mdMedia('sm');
            }, function (wantsFullScreen) {
                handle.customFullscreen = (wantsFullScreen === true);
            });
        };
        LandingController.$inject = ['URLService', '$translate', '$mdMedia', '$mdDialog', '$scope', '$window', 'DataService'];
        return LandingController;
    }());
    TalkwallApp.LandingController = LandingController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="../../_references.ts"/>
/// <reference path="../../services/urlservice.ts"/>
/// <reference path="../../services/dataservice.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    "use strict";
    var WallController = (function () {
        function WallController(urlService, dataService) {
            this.urlService = urlService;
            this.dataService = dataService;
            console.log('--> WallController: started: ');
            if (this.dataService.checkAuthenticated()) {
                this.activate();
            }
        }
        WallController.prototype.activate = function () {
            console.log('--> WallController: activated: ');
        };
        WallController.$inject = ['URLService', 'DataService'];
        return WallController;
    }());
    TalkwallApp.WallController = WallController;
})(TalkwallApp || (TalkwallApp = {}));
/// <reference path="_references.ts"/>
/// <reference path="app.config.ts"/>
/// <reference path="services/dataservice.ts"/>
/// <reference path="services/authenticationservice.ts"/>
/// <reference path="services/tokenservice.ts"/>
/// <reference path="services/urlservice.ts"/>
/// <reference path="services/utilityservice.ts"/>
/// <reference path="directives/autoresize.ts"/>
/// <reference path="components/login/login.ts"/>
/// <reference path="components/landing/landing.ts"/>
/// <reference path="components/wall/wall.ts"/>
/// <reference path="app.run.ts"/>
var TalkwallApp;
(function (TalkwallApp) {
    'use strict';
    var dependencies = [
        'ngRoute',
        'ngAria',
        'ngAnimate',
        'pascalprecht.translate',
        'ngMaterial'
    ];
    angular.module('TalkwallApp', dependencies)
        .config(TalkwallApp.configApp)
        .service('URLService', TalkwallApp.URLService)
        .service('DataService', TalkwallApp.DataService)
        .service('AuthenticationService', TalkwallApp.AuthenticationService)
        .service('TokenInterceptor', TalkwallApp.TokenInterceptor)
        .service('UtilityService', TalkwallApp.UtilityService)
        .directive('autoresize', TalkwallApp.AutoResize)
        .controller('LoginController', TalkwallApp.LoginController)
        .controller('LandingController', TalkwallApp.LandingController)
        .controller('WallController', TalkwallApp.WallController)
        .run(TalkwallApp.runApp);
})(TalkwallApp || (TalkwallApp = {}));
